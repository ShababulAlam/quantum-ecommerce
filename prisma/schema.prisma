// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String
  role           Role      @default(CUSTOMER)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  address        Address[]
  cart           Cart?
  orders         Order[]
  wishlistItems  WishlistItem[]
  reviews        Review[]
}

enum Role {
  ADMIN
  CUSTOMER
}

// Address model
model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      Order[]

  @@index([userId])
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryToSubcategory")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    ProductToCategory[]

  @@index([parentId])
}

// Product model
model Product {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  description       String    @db.Text
  price             Decimal   @db.Decimal(10, 2)
  compareAtPrice    Decimal?  @db.Decimal(10, 2)
  sku               String?   @unique
  inventory         Int       @default(0)
  metaTitle         String?
  metaDescription   String?
  isVisible         Boolean   @default(true)
  isFeatured        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  categories        ProductToCategory[]
  images            ProductImage[]
  attributes        ProductAttribute[]
  variants          ProductVariant[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  wishlistItems     WishlistItem[]
  reviews           Review[]
}

// Product to Category relation model
model ProductToCategory {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

// Product Image model
model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  alt         String?
  isDefault   Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  
  @@index([productId])
}

// Product Attribute model
model ProductAttribute {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String
  value       String
  
  @@index([productId])
}

// Product Variant model
model ProductVariant {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String
  sku         String?   @unique
  price       Decimal   @db.Decimal(10, 2)
  inventory   Int       @default(0)
  attributes  String    @db.Text // JSON string of attributes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
}

// Cart model
model Cart {
  id        String    @id @default(cuid())
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  items     CartItem[]
  
  @@index([userId])
  @@index([sessionId])
}

// Cart Item model
model CartItem {
  id          String    @id @default(cuid())
  cartId      String
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId   String?
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([cartId])
  @@index([productId])
}

// Order model
model Order {
  id              String      @id @default(cuid())
  number          String      @unique // Formatted order number (e.g., ORD-1001)
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  addressId       String?
  address         Address?    @relation(fields: [addressId], references: [id], onDelete: SetNull)
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  discount        Decimal     @db.Decimal(10, 2) @default(0)
  promoCodeId     String?
  promoCode       PromoCode?  @relation(fields: [promoCodeId], references: [id], onDelete: SetNull)
  paymentMethod   String
  paymentId       String?     // External payment reference
  notes           String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  items           OrderItem[]
  
  @@index([userId])
  @@index([addressId])
  @@index([promoCodeId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// Order Item model
model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  name        String    // Store name at time of purchase
  sku         String?   // Store SKU at time of purchase
  price       Decimal   @db.Decimal(10, 2) // Price at time of purchase
  quantity    Int
  attributes  String?   @db.Text // JSON string of selected attributes
  
  @@index([orderId])
  @@index([productId])
}

// Wishlist Item model
model WishlistItem {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  
  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

// Review model
model Review {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating      Int
  title       String?
  comment     String?   @db.Text
  isVerified  Boolean   @default(false)
  isVisible   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
  @@index([productId])
}

// Promo Code model
model PromoCode {
  id              String          @id @default(cuid())
  code            String          @unique
  description     String?
  discountType    DiscountType
  discountAmount  Decimal         @db.Decimal(10, 2)
  minimumAmount   Decimal?        @db.Decimal(10, 2)
  startDate       DateTime
  endDate         DateTime?
  usageLimit      Int?
  usageCount      Int             @default(0)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  orders          Order[]
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// SEO Settings model
model SeoSettings {
  id                String    @id @default(cuid())
  page              String    @unique
  title             String
  description       String?   @db.Text
  keywords          String?
  ogImage           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Site Settings model
model SiteSettings {
  id                String    @id @default(cuid())
  key               String    @unique
  value             String    @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}